import cv2
import numpy
import math
from PIL import Image


#mean adjustment for a 1d array
def mean_adjustment(array_1d):
	mean = array_1d.mean()
	for x in range(0, len(array_1d)):
		temp = array_1d[x] - mean
		array_1d[x] = temp
	return array_1d


#normalise the vector in a 1d array and return the array
def normalised_vector(array_1d):
	total = 0
	for x in range(0, len(array_1d)):
		total = total + array_1d[x]*array_1d[x]

	total = math.sqrt(total)
	for x in range(0, len(array_1d)):
		array_1d[x] = array_1d[x] / total
	return array_1d


#Ini func that create and return the mean adjusted database matrix
def ini_img_base():
	#Create the base 100*10000 matrix
	no_of_image = 35
	baseMatrix = numpy.zeros((no_of_image,10000))
	array_int = numpy.zeros(10000)

	for x in range(0, no_of_image):
		img = Image.open('cap/%s.jpg' % x).convert('L')  #import the image base
		img_arr_2d = numpy.asarray(img)              #convert the image to 2d array
		img_arr_1d = img_arr_2d.flatten()			 #convert the image 2d array to 1d array
		for y in range(0, len(img_arr_1d)):
			array_int[y] =  img_arr_1d[y]          
		#array_int = mean_adjustment(array_int)     #perform the mean adjustment for teh 1d array
		baseMatrix[x,:] = array_int[:]              #save the mean adjusted array in the the base matrix

	return baseMatrix

#import eigenFaces(imgNum*200) generated by create_eigFaces.py
def eigenFacesImport():
	imgNum = 35
	eigenFaces = numpy.empty((imgNum,200),float)
	filepath = 'eigFaces'  
	with open(filepath) as fp:  
		vec = fp.readline()
		row = 1

		while row <imgNum:
			col = 1
	   		while col<200:

				eigenFaces[row-1,col-1] = vec
				vec = fp.readline()
				col += 1
			row +=1

	print ("eigenFaces:",eigenFaces.shape)
	return eigenFaces

#convert complex eigenvector to modulus
def convertComplex(complex_number):
	
	complex_number = complex_number.replace("+-", "-")
	#t = complex(''.join(complex_number.split()))
	#print complex_number
	t = complex(complex_number)
	result = (t.real*t.real + t.imag*t.imag)**(1.0/2)
	return result


#import eigenvector(200*10000) from eigenvector.txt
def eigenVectorImport():

	eigVector = numpy.empty((200,10000),float)
	filepath2 = 'eignevector'  

	with open(filepath2) as fp:  
		vec = fp.readline()
		row = 1

		while row <200: #pick eigenvectors with top 200 largest eigenvalue
			col = 1

	   		while col<10000: #with each eigenvector: 1*10000
				cmpl = convertComplex(vec)
				eigVector[row-1,col-1] = cmpl
				vec = fp.readline()
				col += 1

			row +=1

	print ("eigenVector:",eigVector.shape)
	return eigVector 


def eigenVectorImportnew():

	eigVector = numpy.empty((10000*200,1),float)
	filepath2 = 'eignevector'  

	with open(filepath2) as fp:  
		vec = fp.readline()
		cnt = 1

		while cnt <10000*200: #pick eigenvectors with top 200 largest eigenvalue
			cmpl = convertComplex(vec)
			eigVector[cnt-1] = cmpl
			vec = fp.readline()
			cnt += 1

		eigVec = numpy.resize(eigVector,(10000,200))

	eigVectorT = eigVec.transpose()		
	print ("eigenVectorT:",eigVectorT.shape)

	return eigVectorT